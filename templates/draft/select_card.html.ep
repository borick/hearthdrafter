% layout 'default';
% content_for header => begin
% $run_details->{class_name} =~ s/([^\s\w]*)(\S+)/$1\u\L$2/g;
  <title>HearthDrafter - <%= $run_details->{class_name} %> Run</title>
% end
% content_for title_bar => begin
<span class="title_label <%= lc($run_details->{class_name}) %>"><%= $run_details->{class_name} %> Run</span>
% end
<div id="top_bar">
    <div id="selection">
        <div class="card1 <%= lc($run_details->{class_name}) %>_shadow"></div>
        <div class="card2 <%= lc($run_details->{class_name}) %>_shadow"></div>
        <div class="card3 <%= lc($run_details->{class_name}) %>_shadow"></div>
        <style>clear: both;</style>
    </div>
    <div id="inner_search_panel">
        <div id="cards">
        <input class="search" placeholder="search" />
        <ul class="list"></ul>
        </div>
    </div>
</div>
<div id="tabs">
  <ul>
    <li><a href="#tabs-1">Cards List</a></li>
    <!--<li><a href="#tabs-2">Summary</a></li>-->
  </ul>
  <div id="tabs-1">
  <table border="0" width="100%" id="cards_chosen">
     % for my $card (sort(keys($run_details->{card_counts}))) {
        <tr>
            <td id="card_name"><span class="capital"><%== $card %></span></td>
            <td id="card_count"><%== $run_details->{card_counts}->{$card} %></td>
        </tr>
     % }
  </table></div>
</div>

<script type="text/javascript">

function preload(arrayOfImages) {
    $(arrayOfImages).each(function(){
        $('<img/>')[0].src = this;
    });
}
var card_number = <%= $card_number %>;
var cards = [
% # has to match the format defined in hearthdrafter.js
% my $cards = stash 'cards';
% for my $card (@$cards) {
     {name:"<%== $card->{name} %>",
      id: "<%== $card->{id} %>",
      type: "<%== $card->{type} %>",
      cost: "<%== $card->{cost} %>",
      rarity: "<%== $card->{rarity} %>"},
% }
];
var card_data = [];
//preload the images!
var images = [card_back];
for (i = 0; i < cards.length; i++) {
    images.push(img + cards[i]['id'] + '.png');
    card_data[cards[i]['name']] = cards[i];
}
preload(images);
//console.log(card_data);
function updateManaCostChosenCards() {
    //add the cost to the list of cards
    rows = $('#tabs-1 table tr');
    for (i = 0; i < rows.length; i++) {
        jrows = jQuery(rows[i]);
        text = jrows.find('[id=card_name]').text();
        jrows.prepend($('<td id="cost">'+card_data[text]['cost']+'</td>'));
    }
    sortTable();
}

updateManaCostChosenCards();

//create a dict to map names to IDs since not sure how else to get this into list.js.
var card_ids = {};
var card_rarity = {};
var class_name = "<%= lc($run_details->{class_name}) %>";
for (i = 0; i < cards.length; i++) {
    card_ids[cards[i]['name']] = cards[i]['id'];
    card_rarity[cards[i]['name']] = cards[i]['rarity'];
}

//tab it up
$(function() {
    var tabs = $( "#tabs" ).tabs();
    tabs.find( ".ui-tabs-nav" ).sortable({
        axis: "x",
        stop: function() {
        tabs.tabs( "refresh" );
        }
    });
});

function sortTable(){
    var tbl = document.getElementById("cards_chosen").tBodies[0];
    if (tbl == null)
        return;
    var store = [];
    for(var i=0, len=tbl.rows.length; i<len; i++){
        var row = tbl.rows[i];
        var sortnr = parseFloat(row.cells[0].textContent || row.cells[0].innerText);
        if(!isNaN(sortnr)) store.push([sortnr, row]);
    }
    store.sort(function(x,y){
        return y[0] - x[0];
    });
    for(var i=0, len=store.length; i<len; i++){
        tbl.appendChild(store[i][1]);
    }
    store = null;
}
//do the card selection stuff inside hearthdrafter.js
$(document).ready(function() {    
    //load the card reader :D
    var connect = function() {
        try {
            var ws = new WebSocket('<%= url_for('reader_socket')->to_abs . "/" . stash('arena_id')%>');
            ws.onopen = function () {
                console.log('Connection opened');
            };
            ws.onmessage = function(event) {
                var data = event.data;
                data = JSON.parse(data);
                var cur_cards = data['current_cards'];
                if (typeof cur_cards !== 'undefined') {
                    console.log(data);
                    console.log(cur_cards);
                    for(c=0;c<cur_cards.length;c++) {
                        layoutCardChosen(cur_cards[c], c);
                    }
                    loadChosenCards(data);
                } else {
                    // this is a confirmation.
                    console.log('got confirm');
                    confirmCardByName(data['card'], data['data']);
                }
            };
            //ping to keep the server alive.
            setInterval(function(){ ws.send('!')}, 30000);
        } catch (err) {
            console.log(err);
        }
    };
    connect();
    loadCardSelection();
    updateUndoLink();
    
});
</script>